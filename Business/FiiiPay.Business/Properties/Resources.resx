<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BackOfficeRefundOrderSubTitle" xml:space="preserve">
    <value>Customer refund appeal accpeted, platform will return the order amount</value>
  </data>
  <data name="BackOfficeRefundOrderTitle" xml:space="preserve">
    <value>Refund appeal-{0}</value>
  </data>
  <data name="BonusComeFrom" xml:space="preserve">
    <value>System</value>
  </data>
  <data name="BonusDescription" xml:space="preserve">
    <value>Received reward from Invitation activity</value>
  </data>
  <data name="BonusIncome" xml:space="preserve">
    <value>Reward-Earning</value>
  </data>
  <data name="DepositCancelled" xml:space="preserve">
    <value>Failed</value>
  </data>
  <data name="DepositCancelSubTitle" xml:space="preserve">
    <value>{0} deposited failed, check details</value>
  </data>
  <data name="DepositCancelTitle" xml:space="preserve">
    <value>Deposit-{0}</value>
  </data>
  <data name="DepositConfirmed" xml:space="preserve">
    <value>Confirmed</value>
  </data>
  <data name="DepositEmailContent" xml:space="preserve">
    <value>{0} of {1} has been deposited to your account</value>
  </data>
  <data name="DepositEmailTitle" xml:space="preserve">
    <value>Deposit of {0}</value>
  </data>
  <data name="DepositPending" xml:space="preserve">
    <value>Pending</value>
  </data>
  <data name="DepositSubTitle" xml:space="preserve">
    <value>You have one deposit completed, check details</value>
  </data>
  <data name="DepositTitle" xml:space="preserve">
    <value>Deposited-{0}</value>
  </data>
  <data name="EMNotSupportWithdrawl" xml:space="preserve">
    <value>The withdrawal and deposit function is not ready currently, we will announce officially once ready</value>
  </data>
  <data name="KYC_LV1_REJECTTitle" xml:space="preserve">
    <value>Lv1 Verify Failed</value>
  </data>
  <data name="KYC_LV1_VERIFIEDTitle" xml:space="preserve">
    <value>Lv1 Verify Passed</value>
  </data>
  <data name="KYC_LV2_REJECTTitle" xml:space="preserve">
    <value>Lv2 Verify Failed</value>
  </data>
  <data name="KYC_LV2_VERIFIEDTitle" xml:space="preserve">
    <value>Lv2 Verify Passed</value>
  </data>
  <data name="OrderClosed" xml:space="preserve">
    <value>Closed</value>
  </data>
  <data name="OrderCompleted" xml:space="preserve">
    <value>Completed</value>
  </data>
  <data name="OrderPending" xml:space="preserve">
    <value>Pending</value>
  </data>
  <data name="OrderRefunded" xml:space="preserve">
    <value>Refunded</value>
  </data>
  <data name="RefundSubTitle" xml:space="preserve">
    <value>Refund completed, check details</value>
  </data>
  <data name="RefundTitle" xml:space="preserve">
    <value>Refund-{0}</value>
  </data>
  <data name="Transfer" xml:space="preserve">
    <value>Transfer</value>
  </data>
  <data name="TransferFromFiiiExSubTitle" xml:space="preserve">
    <value>You have received one transfer from FiiiExchange, check details</value>
  </data>
  <data name="TransferFromFiiiExTitle" xml:space="preserve">
    <value>Transfer(in)-{0}</value>
  </data>
  <data name="TransferInto" xml:space="preserve">
    <value>Transfer-In</value>
  </data>
  <data name="TransferOut" xml:space="preserve">
    <value>Transfer-Out</value>
  </data>
  <data name="TransferToFiiiExSubTitle" xml:space="preserve">
    <value>You have one transfer to FiiiExchange completed, check details</value>
  </data>
  <data name="TransferToFiiiExTitle" xml:space="preserve">
    <value>Transfer(out)-{0}</value>
  </data>
  <data name="User_KYC_LV1_DefaultBody" xml:space="preserve">
    <value>Lv1 Identity Verify Passed</value>
  </data>
  <data name="User_KYC_LV2_DefaultBody" xml:space="preserve">
    <value>Lv2 Residential proof Verify Passed</value>
  </data>
  <data name="WithdrawalEmailContent" xml:space="preserve">
    <value>You have succesfully withdraw {0} of {1}</value>
  </data>
  <data name="WithdrawalEmailTitle" xml:space="preserve">
    <value>Withdrawal of {0}</value>
  </data>
  <data name="WithdrawalRejectEmailContent" xml:space="preserve">
    <value>You have failed to withdraw {0} of {1}, please contact customer service</value>
  </data>
  <data name="WithdrawalRejectEmailTitle" xml:space="preserve">
    <value>Withdrawal of {0}</value>
  </data>
  <data name="WithdrawalRejectSubTitle" xml:space="preserve">
    <value>You have one withdrawal was failed, check details</value>
  </data>
  <data name="WithdrawalRejectTitle" xml:space="preserve">
    <value>Withdraw-{0}</value>
  </data>
  <data name="WithdrawalSubTitle" xml:space="preserve">
    <value>You have one withdrawal completed, check details</value>
  </data>
  <data name="WithdrawalTitle" xml:space="preserve">
    <value>Withdraw-{0}</value>
  </data>
  <data name="Deposit" xml:space="preserve">
    <value>Deposit</value>
  </data>
  <data name="UnderReview" xml:space="preserve">
    <value>Under review</value>
  </data>
  <data name="Verified" xml:space="preserve">
    <value>Verified</value>
  </data>
  <data name="Lv1_Lv2" xml:space="preserve">
    <value>Lv1 verified，Lv2 to be verified</value>
  </data>
  <data name="ToBeVerification" xml:space="preserve">
    <value>To be verified</value>
  </data>
  <data name="Withdrawal" xml:space="preserve">
    <value>Withdrawal</value>
  </data>
  <data name="VerificationLv1First" xml:space="preserve">
    <value>Please verify Lv1 in advance</value>
  </data>
  <data name="Recertification" xml:space="preserve">
    <value>Please verify {0} again</value>
  </data>
  <data name="SMS_Template" xml:space="preserve">
    <value>SMS verification code:{0}, valid for {1} mins only --FiiiPay</value>
  </data>
  <data name="VerificationCodoEmailTitle" xml:space="preserve">
    <value>【FiiiPay】Email verification code</value>
  </data>
  <data name="Email_Template" xml:space="preserve">
    <value>【FiiiPay】Email verification code：{0}, please do not use it if you are not the intended recipient, valid within {1} minutes</value>
  </data>
  <data name="ConsumeSubTitle" xml:space="preserve">
    <value>You have got one payment message, check details</value>
  </data>
  <data name="ConsumeTitle" xml:space="preserve">
    <value>Expense-{0}</value>
  </data>
  <data name="KYC_LV1_REJECTSubTitle" xml:space="preserve">
    <value>Lv1 Identity verification was failed, check details</value>
  </data>
  <data name="KYC_LV1_VERIFIEDSubTitle" xml:space="preserve">
    <value>Lv1 Identity verification has been approved, check details</value>
  </data>
  <data name="KYC_LV2_REJECTSubTitle" xml:space="preserve">
    <value>Lv2 Residential proof was verified failed, check details</value>
  </data>
  <data name="KYC_LV2_VERIFIEDSubTitle" xml:space="preserve">
    <value>Lv2 Residential proof has been approved, check details</value>
  </data>
  <data name="TransferIntoSubTitle" xml:space="preserve">
    <value>You have received one transfer from {0}, check details</value>
  </data>
  <data name="TransferIntoTitle" xml:space="preserve">
    <value>Transfer(in)-{0}</value>
  </data>
  <data name="TransferOutSubTitle" xml:space="preserve">
    <value>You have one transfer completed, check details</value>
  </data>
  <data name="TransferOutTitle" xml:space="preserve">
    <value>Transfer(out)-{0}</value>
  </data>
  <data name="FailedGenerateAddress" xml:space="preserve">
    <value>Failed to generate address</value>
  </data>
  <data name="BonusFIII" xml:space="preserve">
    <value>Bonus-FIII</value>
  </data>
  <data name="BonusSubTitle" xml:space="preserve">
    <value>Bonus of FiiiCoin has been arrived your account, check details</value>
  </data>
  <data name="NewsTemplate" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;

&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="UTF-8"&gt;
        &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
        &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;
        &lt;title&gt;&lt;/title&gt;
        &lt;style&gt;
            html,
            body {
                box-sizing: border-box;
                margin: 0;
                padding: 0;
                min-width: 320px;
                font-family: "PingFang SC";
                font-size: 100%;
                color: #606266;
                font-weight: 600;
                overflow-x: hidden;
                overflow-y: scroll;
            }

            h1 {
                font-size: 1.2rem;
                text-align: center;
                margin: 0.375rem 0;
            }

            .mian {
                padding: 0 0.825rem;
            }

            .mian p span{
                white-space: normal !important;
            }

            p {
                white-space: normal !important;
                padding: 0.25rem 0;
                font-size: 0.825rem;
                line-height: 1.2rem;
                text-align: left;
                margin: 0;
                margin-bottom: 0px;
                font-weight: 500;
            }

            h2 {
                font-size: 0.825rem;
                text-align: left;
                color: #cccccc;
                font-weight: 400;
                margin: 0.825rem 0;
            }

            .bg {
                background-color: #F2F6FC;
                word-break: break-word;
                padding: 0.5rem 0.75rem;
            }

            .bg:last-child {
                padding-bottom: 2rem;
            }

            @media screen and (min-width: 576px) {
                html,
                body {
                    font-size: 150%;
                }
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class="mian"&gt;
            &lt;h1&gt;[Title]&lt;/h1&gt;
            &lt;h2 id="time" data-utc="[PublishTime]"&gt;[PublishTime]&lt;/h2&gt;
            &lt;div class="bg"&gt;[Content]&lt;/div&gt;
            &lt;script&gt;
                function formatDateTime(inputTime) {
                    var date = new Date(inputTime);
                    var y = date.getFullYear();
                    var m = date.getMonth() + 1;
                    m = m &lt; 10 ? ('0' + m) : m;
                    var d = date.getDate();
                    d = d &lt; 10 ? ('0' + d) : d;
                    var h = date.getHours();
                    h = h &lt; 10 ? ('0' + h) : h;
                    var minute = date.getMinutes();
                    minute = minute &lt; 10 ? ('0' + minute) : minute;
                    return y + '-' + m + '-' + d + ' ' + h + ':' + minute;
                }
                document.onreadystatechange = function () {
                    var el = document.getElementById('time');
                    el.innerText = formatDateTime(el.dataset.utc * 1);
                }
            &lt;/script&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="FiiiposInviteSuccessContent" xml:space="preserve">
    <value>This FiiiPOS has accepted your invitation, the merchant name is {0}</value>
  </data>
  <data name="FiiiposInviteSuccessTitle" xml:space="preserve">
    <value>Reward-Invite FiiiPOS to Register</value>
  </data>
  <data name="FiiiposUnbindContent" xml:space="preserve">
    <value>FiiiPOS from your account, the merchant name is {0}</value>
  </data>
  <data name="FiiiposUnbindTitle" xml:space="preserve">
    <value>Reward-Unbind FiiiPOS from Your Account</value>
  </data>
  <data name="InviteFiiiposSuccessSubTitle" xml:space="preserve">
    <value>This FiiiPOS has accepted your invitation, the merchant name is {0}</value>
  </data>
  <data name="InviteFiiiposSuccessTitle" xml:space="preserve">
    <value>Reward-Invite FiiiPOS to Register</value>
  </data>
  <data name="RewardUnbindFiiiposSubTitle" xml:space="preserve">
    <value>FiiiPOS from your account, the merchant name is {0}</value>
  </data>
  <data name="RewardUnbindFiiiposTitle" xml:space="preserve">
    <value>Reward-Unbind FiiiPOS from Your Account</value>
  </data>
  <data name="BillTypeNetOrder" xml:space="preserve">
    <value>Online Payment</value>
  </data>
  <data name="GatewayOrderPaymentRefundSubTitle" xml:space="preserve">
    <value>Your refund request has finished, check details</value>
  </data>
  <data name="GatewayOrderPaymentRefundTitle" xml:space="preserve">
    <value>Refund-{0}</value>
  </data>
  <data name="GatewayOrderPaymentSubTitle" xml:space="preserve">
    <value>You have an online payment order, check details</value>
  </data>
  <data name="GatewayOrderPaymentTitle" xml:space="preserve">
    <value>Online Payment-{0}</value>
  </data>
  <data name="EMNeedLV1Verfied" xml:space="preserve">
    <value>Please finish LV1 certification first before using this function</value>
  </data>
  <data name="BillerOrderComplete" xml:space="preserve">
    <value>Completed</value>
  </data>
  <data name="BillerOrderFail" xml:space="preserve">
    <value>Failed and refunded</value>
  </data>
  <data name="BillerOrderPending" xml:space="preserve">
    <value>Pending</value>
  </data>
  <data name="BillerCompleteSubTitle" xml:space="preserve">
    <value>You have got one pay bill message, check details</value>
  </data>
  <data name="BillerDetailType" xml:space="preserve">
    <value>Pay Bill</value>
  </data>
  <data name="BillerFailSubTitle" xml:space="preserve">
    <value>You have failed to make one pay bill, check details</value>
  </data>
  <data name="BillerTitle" xml:space="preserve">
    <value>Pay Bill-{0}</value>
  </data>
  <data name="BillerOverAddressMaxCount" xml:space="preserve">
    <value>Only up to 500 Billers are allowed.</value>
  </data>
  <data name="BillerAddressExisted" xml:space="preserve">
    <value>This Biller already exists</value>
  </data>
  <data name="BillerMessageFailTitle" xml:space="preserve">
    <value>Pay Bill Failed</value>
  </data>
  <data name="BillerFailTitle" xml:space="preserve">
    <value>Pay Bill Failed-{0}</value>
  </data>
  <data name="BillerOverDayMaxAmount" xml:space="preserve">
    <value>Reaching the daily payment limit, please try it again tomorrow</value>
  </data>
  <data name="BillerOverMaxAmount" xml:space="preserve">
    <value>Single payment cannot exceed {0}</value>
  </data>
  <data name="BillerOverMonthMaxAmount" xml:space="preserve">
    <value>Reaching the monthly payment limit, please try it again next month.</value>
  </data>
  <data name="BillerExchangeRateError" xml:space="preserve">
    <value>The exchange rate may be updated from time to time. The actual amount has changed, please remake the payment.</value>
  </data>
  <data name="BillerForbidden" xml:space="preserve">
    <value>This function is not available now, please contact our customer service.</value>
  </data>
  <data name="StoreOrderIncome" xml:space="preserve">
    <value>Store Incomes</value>
  </data>
  <data name="RedPocketStatus" xml:space="preserve">
    <value>In progress,Completed,Partial Refund,Full Refund</value>
  </data>
  <data name="StoreOrderConsumeSubTitle" xml:space="preserve">
    <value>You have made a payment, see details</value>
  </data>
  <data name="StoreOrderConsumeTitle" xml:space="preserve">
    <value>Offline payment-{0}</value>
  </data>
  <data name="StoreOrderIncomeSubTitle" xml:space="preserve">
    <value>You have received a payment, see detail</value>
  </data>
  <data name="StoreOrderIncomeTitle" xml:space="preserve">
    <value>Payment Received-{0}</value>
  </data>
  <data name="FiiipayMerchantCertifiedSubTitle" xml:space="preserve">
    <value>Your application has passed the review，check details</value>
  </data>
  <data name="FiiipayMerchantCertifiedTitle" xml:space="preserve">
    <value>Shop Review - Pass</value>
  </data>
  <data name="FiiipayMerchantDisapprovalSubTitle" xml:space="preserve">
    <value>Your application has failed to pass the review , check details</value>
  </data>
  <data name="FiiipayMerchantDisapprovalTitle" xml:space="preserve">
    <value>Shop Review - Fail</value>
  </data>
  <data name="FiiipayMerchantDisapprovalDetail" xml:space="preserve">
    <value>Your application has failed to pass the review\n\nSorry, your application has failed to pass the review.\nReason:{0}</value>
  </data>
  <data name="FiiipayMerchantVerifyDetail" xml:space="preserve">
    <value>Your application has passed the review\n\nCongratulation! Your application has passed the review. The shop information submitted by you will be displayed on your shop</value>
  </data>
  <data name="Payment" xml:space="preserve">
    <value>Offline Payment</value>
  </data>
</root>